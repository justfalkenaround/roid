'use strict';

/*------CUBE GEOMETRY CLASS------*/
class Cube extends Geometry {
    constructor(id) {
        const data = {};
        data.renderingMode = 'LINES';
        data.descriptor = 'CUBE';
        data.vertices = Cube._vertices;
        data.indices = Cube._indices;
        super(data, id);
    }

    /*------SET TO PRE-DEFINED COLORS------*/
    colorfull() {
        this.colors = Cube._colors;
    }

    /*------VERTICES/INDICES/COLORS------*/
    static get _vertices() {
        return [
            -0.2, -0.2, 0.2,
            0.2, -0.2, 0.2,
            0.2, 0.2, 0.2,
            -0.2, 0.2, 0.2,

            -0.2, -0.2, -0.2,
            -0.2, 0.2, -0.2,
            0.2, 0.2, -0.2,
            0.2, -0.2, -0.2,

            -0.2, 0.2, -0.2,
            -0.2, 0.2, 0.2,
            0.2, 0.2, 0.2,
            0.2, 0.2, -0.2,

            -0.2, -0.2, -0.2,
            0.2, -0.2, -0.2,
            0.2, -0.2, 0.2,
            -0.2, -0.2, 0.2,

            0.2, -0.2, -0.2,
            0.2, 0.2, -0.2,
            0.2, 0.2, 0.2,
            0.2, -0.2, 0.2,

            -0.2, -0.2, -0.2,
            -0.2, -0.2, 0.2,
            -0.2, 0.2, 0.2,
            -0.2, 0.2, -0.2,
        ];
    }

    static get _indices() {
        return [
            0, 1, 2, 0, 2, 3,
            4, 5, 6, 4, 6, 7,
            8, 9, 10, 8, 10, 11,
            12, 13, 14, 12, 14, 15,
            16, 17, 18, 16, 18, 19,
            20, 21, 22, 20, 22, 23,
        ];
    }

    static get _colors() {
        return [
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 1, 1, 1,
            1, 0, 0, 1,
            1, 0, 0, 1,
            1, 0, 0, 1,
            1, 0, 0, 1,
            0, 1, 0, 1,
            0, 1, 0, 1,
            0, 1, 0, 1,
            0, 1, 0, 1,
            0, 0, 1, 1,
            0, 0, 1, 1,
            0, 0, 1, 1,
            0, 0, 1, 1,
            1, 1, 0, 1,
            1, 1, 0, 1,
            1, 1, 0, 1,
            1, 1, 0, 1,
            1, 0, 1, 1,
            1, 0, 1, 1,
            1, 0, 1, 1,
            1, 0, 1, 1
        ];
    }
}